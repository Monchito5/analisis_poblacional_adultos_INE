# Proyecto Miner√≠a de Datos ‚Äî Proyecci√≥n 2015‚Äì2035

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.io as pio
from pathlib import Path
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error
from scipy import stats
from matplotlib import patheffects
from src.config.settings import (
    BASE_DIR,
    RAW_DIR,
    PREPARED_DIR,
    ABSTRACT_DIR,
    INTERACTIVE_DIR,
    STATIC_DIR,
    SCREENSHOTS_DIR,
    PATHS,
    REGION_CONFIG
)
# Asegurar carpetas de destino
STATIC_DIR.mkdir(parents=True, exist_ok=True)
INTERACTIVE_DIR.mkdir(parents=True, exist_ok=True)

# Configuraci√≥n global mejorada
plt.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['axes.unicode_minus'] = False
plt.rcParams['axes.titlepad'] = 10
plt.rcParams['axes.titleweight'] = 'bold'
plt.rcParams['axes.titlesize'] = 16
plt.rcParams['axes.labelweight'] = 'bold'
sns.set_theme(style="whitegrid", context="talk", font_scale=0.9)

# Configuraci√≥n de Plotly
pio.templates.default = "plotly_white"

# Paletas profesionales
REGION_PALETTE = {
    "Jalisco": "#1f77b4",
    "ZMG": "#ff7f0e",
    "GDL": "#2ca02c"
}
GENDER_PALETTE = {
    "Hombres": "#3498db",
    "Mujeres": "#e74c3c"
}

# Efectos de texto
TITLE_EFFECT = [patheffects.withStroke(linewidth=1, foreground='black')]
LABEL_EFFECT = [patheffects.withStroke(linewidth=2, foreground='white')]

def apply_advanced_styling(ax, title):
    """Aplica estilos avanzados a los gr√°ficos"""
    # Fondo y cuadr√≠cula
    ax.set_facecolor('#f8f9fa')
    ax.grid(True, linestyle='--', alpha=0.7)
    
    # Bordes
    for spine in ax.spines.values():
        spine.set_visible(False)
    
    # T√≠tulo con efecto
    ax.title.set_path_effects(TITLE_EFFECT)
    
    # Etiquetas con efecto
    for label in ax.get_xticklabels() + ax.get_yticklabels():
        label.set_path_effects(LABEL_EFFECT)
        label.set_fontsize(12)
    
    # Leyenda
    legend = ax.get_legend()
    if legend:
        legend.get_frame().set_alpha(0.8)
        legend.get_frame().set_edgecolor('gray')
        legend.get_frame().set_boxstyle("round,pad=0.3", rounding_size=0.2)
        for text in legend.get_texts():
            text.set_path_effects(LABEL_EFFECT)
            text.set_fontsize(11)

# --- 1. Cargar y limpiar el maestro ---
def load_and_clean_master(path: Path) -> pd.DataFrame:
    df = pd.read_csv(path)
    # Eliminar filas con NA en columnas cr√≠ticas
    df = df.dropna(subset=["POB_TOT", "HOMBRES_18+", "MUJERES_18+"]).copy()
    # Z-score para POB_TOT y filtrar outliers (>3œÉ)
    z = np.abs(stats.zscore(df["POB_TOT"]))
    df = df[z < 3]
    # Asegurar tipo de REGI√ìN
    df["REGI√ìN"] = df["REGI√ìN"].astype(str)
    return df.reset_index(drop=True)

# --- 2. Construir serie hist√≥rica 2015‚Äì2025 ---
def build_historical(master: pd.DataFrame) -> pd.DataFrame:
    frames = []
    for region, grp in master.groupby("REGI√ìN"):
        # Reindexar a√±os 2015‚Äì2025
        grp = grp.sort_values("A√ëO").set_index("A√ëO")
        full = grp.reindex(range(2015, 2026))
        # Interpolar columnas num√©ricas
        num_cols = ["POB_TOT", "HOMBRES_18+", "MUJERES_18+"]
        full[num_cols] = full[num_cols].interpolate(method="linear")
        # Rellenar regi√≥n y a√±o
        full["REGI√ìN"] = region
        full = full.reset_index()
        # Redondear poblaci√≥n a entero
        full[num_cols] = full[num_cols].round().astype(int)
        frames.append(full)
    return pd.concat(frames, ignore_index=True)

# --- 3. Proyecci√≥n hasta 2035 ---
def project_to_2035(hist_df: pd.DataFrame) -> pd.DataFrame:
    projections = []
    metrics = ["POB_TOT", "HOMBRES_18+", "MUJERES_18+"]
    for region, grp in hist_df.groupby("REGI√ìN"):
        X = grp[["A√ëO"]].values
        future_years = np.arange(2026, 2036).reshape(-1, 1)
        df_pred = pd.DataFrame({"A√ëO": future_years.flatten()})
        for m in metrics:
            y = grp[m].values
            model = LinearRegression().fit(X, y)
            pred = model.predict(future_years).round().astype(int)
            df_pred[m] = pred
            r2 = r2_score(y, model.predict(X))
            mse = mean_squared_error(y, model.predict(X))
            print(f"{region} | {m}: R¬≤={r2:.3f}, MSE={mse:.0f}")
        df_pred["REGI√ìN"] = region
        projections.append(df_pred)
    return pd.concat(projections, ignore_index=True)

# --- 4. Clasificaci√≥n de mayor√≠a de g√©nero ---
def logistic_majority_gender(df: pd.DataFrame):
    df = df.copy()
    df["MAYORIA_HOMBRES"] = (df["HOMBRES_18+"] > df["MUJERES_18+"]).astype(int)
    X = df[["POB_TOT", "HOMBRES_18+", "MUJERES_18+"]]
    y = df["MAYORIA_HOMBRES"]
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )
    clf = LinearRegression()  # Regresi√≥n log√≠stica no brinda mucho en 0/1
    clf.fit(X_train, y_train)
    y_pred = (clf.predict(X_test) >= 0.5).astype(int)
    acc = (y_pred == y_test).mean()
    print(f"\nüîç Clasificaci√≥n mayor√≠a de g√©nero ‚Äî Precisi√≥n: {acc:.2f}")

# --- 5. Gr√°ficas descriptivas y series (MEJORADAS) ---
def plot_series(all_df: pd.DataFrame):
    """Gr√°fica de serie hist√≥rica y proyecci√≥n con estilo profesional"""
    # Preparar datos
    all_df["Tipo"] = np.where(all_df["A√ëO"] <= 2025, "Hist√≥rico", "Proyecci√≥n")
    
    # ====================================================================
    # VERSI√ìN EST√ÅTICA
    # ====================================================================
    try:
        plt.figure(figsize=(14, 8))
        ax = sns.lineplot(
            data=all_df,
            x="A√ëO",
            y="POB_TOT",
            hue="REGI√ìN",
            style="Tipo",
            markers=True,
            dashes=False,
            markersize=8,
            palette=REGION_PALETTE,
            linewidth=2.5
        )
        
        # Configuraci√≥n est√©tica
        plt.title("Poblaci√≥n ‚â•18 a√±os: Serie Hist√≥rica y Proyecci√≥n (2015-2035)", 
                 fontsize=18, pad=15, fontweight='bold')
        plt.xlabel("A√±o", fontsize=14, labelpad=10)
        plt.ylabel("Poblaci√≥n Adulta", fontsize=14, labelpad=10)
        
        # L√≠nea vertical para separar hist√≥rico y proyecci√≥n
        plt.axvline(x=2025.5, color='gray', linestyle='--', alpha=0.7)
        plt.text(2025.7, all_df["POB_TOT"].max()*0.9, "Proyecci√≥n", 
                fontsize=12, rotation=90, va='top')
        
        # Formatear eje Y
        ax.get_yaxis().set_major_formatter(
            plt.FuncFormatter(lambda x, loc: f"{int(x/1000000)}M" if x >= 1000000 else f"{int(x/1000)}K")
        )
        
        # A√±adir etiquetas para puntos finales
        for region in all_df["REGI√ìN"].unique():
            last_point = all_df[(all_df["REGI√ìN"] == region) & (all_df["A√ëO"] == 2035)]
            if not last_point.empty:
                ax.annotate(f"{last_point['POB_TOT'].values[0]/1000000:.1f}M", 
                           (last_point["A√ëO"].values[0], last_point["POB_TOT"].values[0]),
                           textcoords="offset points", xytext=(10,0), 
                           ha='left', va='center', fontsize=10,
                           bbox=dict(boxstyle="round,pad=0.3", fc="white", alpha=0.8))
        
        # Aplicar estilos avanzados
        apply_advanced_styling(ax, "Poblaci√≥n ‚â•18 a√±os")
        
        # Leyenda
        plt.legend(title='Regi√≥n', title_fontsize=12, fontsize=11, 
                   frameon=True, shadow=True, loc='best')
        
        # Guardar est√°tico
        static_path = STATIC_DIR / "serie_historica_proyeccion.png"
        plt.tight_layout()
        plt.savefig(static_path, dpi=300, bbox_inches='tight')
        plt.close()
        print(f"‚úÖ Gr√°fico est√°tico guardado: {static_path}")
    except Exception as e:
        print(f"‚ùå Error en gr√°fico est√°tico: {str(e)}")
    
    # ====================================================================
    # VERSI√ìN INTERACTIVA
    # ====================================================================
    try:
        # Crear figura interactiva
        fig = px.line(
            all_df,
            x="A√ëO",
            y="POB_TOT",
            color="REGI√ìN",
            line_dash="Tipo",
            markers=True,
            title="<b>Poblaci√≥n ‚â•18 a√±os: Serie Hist√≥rica y Proyecci√≥n (2015-2035)</b>",
            labels={"POB_TOT": "Poblaci√≥n Adulta", "A√ëO": "A√±o"},
            color_discrete_map=REGION_PALETTE,
            height=600
        )
        
        # A√±adir l√≠nea vertical para proyecci√≥n
        fig.add_vline(x=2025.5, line_dash="dash", line_color="gray", opacity=0.7)
        fig.add_annotation(x=2026, y=all_df["POB_TOT"].max()*0.9, 
                          text="Proyecci√≥n", showarrow=False, 
                          textangle=-90, font_size=12)
        
        # Personalizar dise√±o
        fig.update_layout(
            hovermode="x unified",
            plot_bgcolor='rgba(248,249,250,1)',
            paper_bgcolor='rgba(248,249,250,1)',
            title_font_size=20,
            legend_title_text='Regi√≥n',
            xaxis_tickangle=0,
            font=dict(family="DejaVu Sans, sans-serif"),
            margin=dict(t=80, b=80),
            legend=dict(orientation="h", yanchor="bottom", y=-0.3, xanchor="center", x=0.5)
        )
        
        # Formatear tooltips
        fig.update_traces(
            hovertemplate="<b>%{fullData.name}</b><br>A√±o: %{x}<br>Poblaci√≥n: %{y:,.0f}<extra></extra>",
            marker=dict(size=8),
            line=dict(width=2.5)
        )
        
        # Guardar interactivo
        interactive_path = INTERACTIVE_DIR / "serie_historica_proyeccion.html"
        fig.write_html(interactive_path, include_plotlyjs='cdn')
        print(f"‚úÖ Gr√°fico interactivo guardado: {interactive_path}")
    except Exception as e:
        print(f"‚ùå Error en gr√°fico interactivo: {str(e)}")

def plot_gender_composition(all_df: pd.DataFrame):
    """Gr√°fica de composici√≥n por g√©nero con estilo profesional"""
    # Preparar datos
    gender_df = all_df.melt(
        id_vars=["REGI√ìN", "A√ëO"],
        value_vars=["HOMBRES_18+", "MUJERES_18+"],
        var_name="G√©nero",
        value_name="Poblaci√≥n"
    )
    gender_df["G√©nero"] = gender_df["G√©nero"].replace({
        "HOMBRES_18+": "Hombres",
        "MUJERES_18+": "Mujeres"
    })
    
    # ====================================================================
    # VERSI√ìN EST√ÅTICA
    # ====================================================================
    try:
        plt.figure(figsize=(14, 8))
        ax = sns.lineplot(
            data=gender_df,
            x="A√ëO",
            y="Poblaci√≥n",
            hue="REGI√ìN",
            style="G√©nero",
            markers=True,
            dashes=[(2,2), (None, None)],
            markersize=8,
            palette=REGION_PALETTE,
            linewidth=2.5
        )
        
        # Configuraci√≥n est√©tica
        plt.title("Composici√≥n de G√©nero: Serie Hist√≥rica y Proyecci√≥n (2015-2035)", 
                 fontsize=18, pad=15, fontweight='bold')
        plt.xlabel("A√±o", fontsize=14, labelpad=10)
        plt.ylabel("Poblaci√≥n Adulta", fontsize=14, labelpad=10)
        
        # L√≠nea vertical para separar hist√≥rico y proyecci√≥n
        plt.axvline(x=2025.5, color='gray', linestyle='--', alpha=0.7)
        plt.text(2025.7, gender_df["Poblaci√≥n"].max()*0.9, "Proyecci√≥n", 
                fontsize=12, rotation=90, va='top')
        
        # Formatear eje Y
        ax.get_yaxis().set_major_formatter(
            plt.FuncFormatter(lambda x, loc: f"{int(x/1000000)}M" if x >= 1000000 else f"{int(x/1000)}K")
        )
        
        # Aplicar estilos avanzados
        apply_advanced_styling(ax, "Composici√≥n de G√©nero")
        
        # Leyenda
        plt.legend(title='Regi√≥n/G√©nero', title_fontsize=12, fontsize=11, 
                   frameon=True, shadow=True, loc='best')
        
        # Guardar est√°tico
        static_path = STATIC_DIR / "composicion_genero.png"
        plt.tight_layout()
        plt.savefig(static_path, dpi=300, bbox_inches='tight')
        plt.close()
        print(f"‚úÖ Gr√°fico est√°tico guardado: {static_path}")
    except Exception as e:
        print(f"‚ùå Error en gr√°fico est√°tico: {str(e)}")
    
    # ====================================================================
    # VERSI√ìN INTERACTIVA
    # ====================================================================
    try:
        # Crear figura interactiva
        fig = px.line(
            gender_df,
            x="A√ëO",
            y="Poblaci√≥n",
            color="REGI√ìN",
            line_dash="G√©nero",
            markers=True,
            title="<b>Composici√≥n de G√©nero: Serie Hist√≥rica y Proyecci√≥n (2015-2035)</b>",
            labels={"Poblaci√≥n": "Poblaci√≥n Adulta", "A√ëO": "A√±o"},
            color_discrete_map=REGION_PALETTE,
            height=600
        )
        
        # A√±adir l√≠nea vertical para proyecci√≥n
        fig.add_vline(x=2025.5, line_dash="dash", line_color="gray", opacity=0.7)
        fig.add_annotation(x=2026, y=gender_df["Poblaci√≥n"].max()*0.9, 
                          text="Proyecci√≥n", showarrow=False, 
                          textangle=-90, font_size=12)
        
        # Personalizar dise√±o
        fig.update_layout(
            hovermode="x unified",
            plot_bgcolor='rgba(248,249,250,1)',
            paper_bgcolor='rgba(248,249,250,1)',
            title_font_size=20,
            legend_title_text='Regi√≥n/G√©nero',
            xaxis_tickangle=0,
            font=dict(family="DejaVu Sans, sans-serif"),
            margin=dict(t=80, b=80),
            legend=dict(orientation="h", yanchor="bottom", y=-0.3, xanchor="center", x=0.5)
        )
        
        # Formatear tooltips
        fig.update_traces(
            hovertemplate="<b>%{fullData.name}</b><br>A√±o: %{x}<br>Poblaci√≥n: %{y:,.0f}<extra></extra>",
            marker=dict(size=8),
            line=dict(width=2.5)
        )
        
        # Guardar interactivo
        interactive_path = INTERACTIVE_DIR / "composicion_genero.html"
        fig.write_html(interactive_path, include_plotlyjs='cdn')
        print(f"‚úÖ Gr√°fico interactivo guardado: {interactive_path}")
    except Exception as e:
        print(f"‚ùå Error en gr√°fico interactivo: {str(e)}")

def plot_growth_rates(all_df: pd.DataFrame):
    """Gr√°fica de tasas de crecimiento con estilo profesional"""
    # Calcular tasas de crecimiento anual
    growth_df = all_df.sort_values(["REGI√ìN", "A√ëO"]).copy()
    growth_df["Tasa Crecimiento"] = growth_df.groupby("REGI√ìN")["POB_TOT"].pct_change() * 100
    
    # Eliminar primera fila de cada grupo (sin dato anterior)
    growth_df = growth_df.dropna(subset=["Tasa Crecimiento"])
    
    # ====================================================================
    # VERSI√ìN EST√ÅTICA
    # ====================================================================
    try:
        plt.figure(figsize=(14, 8))
        ax = sns.lineplot(
            data=growth_df,
            x="A√ëO",
            y="Tasa Crecimiento",
            hue="REGI√ìN",
            style="REGI√ìN",
            markers=True,
            dashes=False,
            markersize=8,
            palette=REGION_PALETTE,
            linewidth=2.5
        )
        
        # Configuraci√≥n est√©tica
        plt.title("Tasa de Crecimiento Anual de la Poblaci√≥n Adulta (2016-2035)", 
                 fontsize=18, pad=15, fontweight='bold')
        plt.xlabel("A√±o", fontsize=14, labelpad=10)
        plt.ylabel("Tasa de Crecimiento (%)", fontsize=14, labelpad=10)
        
        # L√≠nea horizontal en cero y l√≠nea vertical para proyecci√≥n
        plt.axhline(y=0, color='gray', linestyle='-', alpha=0.3)
        plt.axvline(x=2025.5, color='gray', linestyle='--', alpha=0.7)
        plt.text(2025.7, growth_df["Tasa Crecimiento"].max()*0.9, "Proyecci√≥n", 
                fontsize=12, rotation=90, va='top')
        
        # Aplicar estilos avanzados
        apply_advanced_styling(ax, "Tasa de Crecimiento")
        
        # Leyenda
        plt.legend(title='Regi√≥n', title_fontsize=12, fontsize=11, 
                   frameon=True, shadow=True, loc='best')
        
        # Guardar est√°tico
        static_path = STATIC_DIR / "tasas_crecimiento.png"
        plt.tight_layout()
        plt.savefig(static_path, dpi=300, bbox_inches='tight')
        plt.close()
        print(f"‚úÖ Gr√°fico est√°tico guardado: {static_path}")
    except Exception as e:
        print(f"‚ùå Error en gr√°fico est√°tico: {str(e)}")
    
    # ====================================================================
    # VERSI√ìN INTERACTIVA
    # ====================================================================
    try:
        # Crear figura interactiva
        fig = px.line(
            growth_df,
            x="A√ëO",
            y="Tasa Crecimiento",
            color="REGI√ìN",
            markers=True,
            title="<b>Tasa de Crecimiento Anual de la Poblaci√≥n Adulta (2016-2035)</b>",
            labels={"Tasa Crecimiento": "Tasa de Crecimiento (%)", "A√ëO": "A√±o"},
            color_discrete_map=REGION_PALETTE,
            height=600
        )
        
        # A√±adir l√≠neas de referencia
        fig.add_hline(y=0, line_dash="solid", line_color="gray", opacity=0.3)
        fig.add_vline(x=2025.5, line_dash="dash", line_color="gray", opacity=0.7)
        fig.add_annotation(x=2026, y=growth_df["Tasa Crecimiento"].max()*0.9, 
                          text="Proyecci√≥n", showarrow=False, 
                          textangle=-90, font_size=12)
        
        # Personalizar dise√±o
        fig.update_layout(
            hovermode="x unified",
            plot_bgcolor='rgba(248,249,250,1)',
            paper_bgcolor='rgba(248,249,250,1)',
            title_font_size=20,
            legend_title_text='Regi√≥n',
            xaxis_tickangle=0,
            font=dict(family="DejaVu Sans, sans-serif"),
            margin=dict(t=80, b=80),
            legend=dict(orientation="h", yanchor="bottom", y=-0.3, xanchor="center", x=0.5)
        )
        
        # Formatear tooltips
        fig.update_traces(
            hovertemplate="<b>%{fullData.name}</b><br>A√±o: %{x}<br>Tasa: %{y:.2f}%<extra></extra>",
            marker=dict(size=8),
            line=dict(width=2.5)
        )
        
        # Guardar interactivo
        interactive_path = INTERACTIVE_DIR / "tasas_crecimiento.html"
        fig.write_html(interactive_path, include_plotlyjs='cdn')
        print(f"‚úÖ Gr√°fico interactivo guardado: {interactive_path}")
    except Exception as e:
        print(f"‚ùå Error en gr√°fico interactivo: {str(e)}")

# --- Main pipeline ---
def main():
    print("="*70)
    print("INICIANDO PROYECCI√ìN POBLACIONAL 2015-2035".center(70))
    print("="*70)
    
    # Cargar maestro
    master_path = ABSTRACT_DIR / "resumen_final.csv"
    print(f"üìÇ Cargando datos desde: {master_path}")
    master = load_and_clean_master(master_path)
    print(f"‚úÖ Datos cargados: {len(master)} registros")

    # Construir hist√≥rico e interpolar
    print("üîç Construyendo serie hist√≥rica 2015-2025...")
    hist = build_historical(master)

    # Proyectar hacia 2035
    print("üìà Proyectando poblaci√≥n hasta 2035...")
    future = project_to_2035(hist)

    # Concatenar todo
    all_data = pd.concat([hist, future], ignore_index=True)
    print(f"üìä Datos consolidados: {len(all_data)} registros (2015-2035)")

    # Clasificaci√≥n de mayor√≠a de g√©nero
    print("\nüîç Analizando composici√≥n de g√©nero...")
    logistic_majority_gender(all_data)

    # Gr√°ficas mejoradas
    print("\nüé® Generando visualizaciones...")
    plot_series(all_data)
    plot_gender_composition(all_data)
    plot_growth_rates(all_data)
    
    # Guardar datos proyectados
    output_path = ABSTRACT_DIR / "proyeccion_2035.csv"
    all_data.to_csv(output_path, index=False)
    print(f"\nüíæ Datos proyectados guardados en: {output_path}")
    
    print("\n" + "="*70)
    print("PROYECCI√ìN COMPLETADA EXITOSAMENTE".center(70))
    print("="*70)
    print(f"üìÅ Gr√°ficos est√°ticos en: {STATIC_DIR}")
    print(f"üìÅ Gr√°ficos interactivos en: {INTERACTIVE_DIR}")

if __name__ == "__main__":
    main()