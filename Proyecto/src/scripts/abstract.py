# Recopilador de datos de poblaci√≥n 2015, 2020 y 2025

import pandas as pd
from pathlib import Path
from src.config.settings import (
    BASE_DIR,
    RAW_DIR,
    PREPARED_DIR,
    ABSTRACT_DIR,
    INTERACTIVE_DIR,
    STATIC_DIR,
    SCREENSHOTS_DIR,
    PATHS,
    REGION_CONFIG
)

# Configuraci√≥n de regiones unificada
REGION_CONFIG_2015 = {
    "Jalisco": {
        "entidad": 14
    },
    "ZMG": {
        "distrito_cod": [7, 8, 9, 11, 12, 13, 14, 15, 16]
    },
    "GDL": {
        "distrito_cod": [8, 9, 11, 14]
    }
}

# Configuraci√≥n espec√≠fica para 2020 (usa distritos electorales)
REGION_CONFIG_2020 = {
    "Jalisco": {
        "distrito_cod": None  # Todo el estado
    },
    "ZMG": {
        "distrito_cod": [7, 8, 9, 11, 12, 13, 14, 15, 16]
    },
    "GDL": {
        "distrito_cod": [8, 9, 11, 14]
    }
}

REGION_CONFIG_2025 = {
    "Jalisco": {
        "clave_entidad": 14
    },
    "ZMG": {
        "clave_distrito": [7, 8, 9, 11, 12, 13, 14, 15, 16]
    },
    "GDL": {
        "clave_distrito": [8, 9, 11, 14]
    }
}

def aplicar_filtros(df, filtros):
    """Aplica filtros a un DataFrame de manera flexible"""
    sub = df.copy()
    for col, val in filtros.items():
        if val is None:
            continue  # No aplicar filtro
        elif isinstance(val, list):
            sub = sub[sub[col].isin(val)]
        else:
            sub = sub[sub[col] == val]
    return sub

def calcular_tasa_crecimiento(pob_final, pob_inicial):
    """Calcula la tasa de crecimiento poblacional anual"""
    if pob_inicial == 0:
        return 0.0  # Evitar divisi√≥n por cero
    return ((pob_final - pob_inicial) / pob_inicial) * 100

def generar_resumen_2015():
    """Genera resumen para datos del censo 2015"""
    # Cargar datos preparados usando ruta de settings
    df = pd.read_csv(PATHS["eige_2015"]["prepared"])

    rows = []
    for region, filtros in REGION_CONFIG_2015.items():
        # Aplicar filtros de regi√≥n
        sub = aplicar_filtros(df, filtros)

        # Calcular poblaci√≥n adulta (18+) y porcentajes de hombres y mujeres
        hombres_18 = sub["hombres_18+"].sum()
        mujeres_18 = sub["mujeres_18+"].sum()
        pob_adulta = hombres_18 + mujeres_18
        porcentaje_hombres = (hombres_18 / pob_adulta) * 100
        porcentaje_mujeres = (mujeres_18 / pob_adulta) * 100

        rows.append({
            "REGI√ìN": region,
            "A√ëO": 2015,
            "POB_TOT": pob_adulta,
            "HOMBRES_18+": hombres_18,
            "MUJERES_18+": mujeres_18,
            "PORCENTAJE_HOMBRES": round(porcentaje_hombres, 1),
            "PORCENTAJE_MUJERES": round(porcentaje_mujeres, 1)
        })

    return pd.DataFrame(rows)

def generar_resumen_2020():
    """Genera resumen para datos del INE 2020"""
    # Cargar datos preparados usando ruta de settings
    df = pd.read_csv(PATHS["ine_2020"]["prepared"])
    
    # Filtrar solo Jalisco (entidad 14)
    df = df[df["entidad"] == 14]
    
    rows = []
    for region, filtros in REGION_CONFIG_2020.items():
        # Aplicar filtros de regi√≥n
        sub = aplicar_filtros(df, filtros)
        
        # Sumar poblaciones
        pop_total = sub["p_18ymas"].sum()
        pop_hombres = sub["hombres_18+"].sum()
        pop_mujeres = sub["mujeres_18+"].sum()
        
        porcentaje_hombres = (pop_hombres / pop_total) * 100
        porcentaje_mujeres = (pop_mujeres / pop_total) * 100
        
        rows.append({
            "REGI√ìN": region,
            "A√ëO": 2020,
            "POB_TOT": int(pop_total),
            "HOMBRES_18+": int(pop_hombres),
            "MUJERES_18+": int(pop_mujeres),
            "PORCENTAJE_HOMBRES": round(porcentaje_hombres, 1),
            "PORCENTAJE_MUJERES": round(porcentaje_mujeres, 1)
        })
    
    return pd.DataFrame(rows)

def generar_resumen_2025():
    """Genera resumen para datos del INE 2025"""
    # Cargar datos preparados usando ruta de settings
    df = pd.read_csv(PATHS["ine_2025"]["prepared"], encoding="latin1")
    
    rows = []
    for region, filtros in REGION_CONFIG_2025.items():
        # Aplicar filtros de regi√≥n
        sub = aplicar_filtros(df, filtros)
        
        # Calcular poblaciones
        hombres = sub["padron_hombres"].sum()
        mujeres = sub["padron_mujeres"].sum()
        
        pop_total = hombres + mujeres
        porcentaje_hombres = (hombres / pop_total) * 100
        porcentaje_mujeres = (mujeres / pop_total) * 100
        
        rows.append({
            "REGI√ìN": region,
            "A√ëO": 2025,
            "POB_TOT": int(pop_total),
            "HOMBRES_18+": int(hombres),
            "MUJERES_18+": int(mujeres),
            "PORCENTAJE_HOMBRES": round(porcentaje_hombres, 1),
            "PORCENTAJE_MUJERES": round(porcentaje_mujeres, 1)
        })

    return pd.DataFrame(rows)

def calcular_indices_demograficos(df_resumen):
    """
    Calcula √≠ndices demogr√°ficos y tasas de crecimiento para cada regi√≥n
    
    Args:
        df_resumen (DataFrame): Datos consolidados con poblaci√≥n por a√±o y regi√≥n
    
    Returns:
        DataFrame: Datos con √≠ndices demogr√°ficos a√±adidos
    """
    # Crear copia para no modificar el original
    df = df_resumen.copy()
    
    # Calcular tasa de crecimiento anual para cada regi√≥n
    df = df.sort_values(["REGI√ìN", "A√ëO"])
    
    # Calcular crecimiento poblacional entre per√≠odos
    df["POB_ANTERIOR"] = df.groupby("REGI√ìN")["POB_TOT"].shift(1)
    df["TASA_CRECIMIENTO"] = df.apply(
        lambda x: calcular_tasa_crecimiento(x["POB_TOT"], x["POB_ANTERIOR"]) 
        if pd.notnull(x["POB_ANTERIOR"]) else None, 
        axis=1
    )
    
    # Calcular densidad poblacional relativa
    pob_total_jalisco = df[df["REGI√ìN"] == "Jalisco"].groupby("A√ëO")["POB_TOT"].first()
    df["DENSIDAD_RELATIVA"] = df.apply(
        lambda x: (x["POB_TOT"] / pob_total_jalisco[x["A√ëO"]]) * 100 
        if x["REGI√ìN"] != "Jalisco" else 100,
        axis=1
    )
    
    # Calcular √≠ndice de feminidad
    df["INDICE_FEMINIDAD"] = (df["MUJERES_18+"] / df["HOMBRES_18+"]) * 100
    
    # Redondear valores
    df["TASA_CRECIMIENTO"] = df["TASA_CRECIMIENTO"].round(1)
    df["DENSIDAD_RELATIVA"] = df["DENSIDAD_RELATIVA"].round(1)
    df["INDICE_FEMINIDAD"] = df["INDICE_FEMINIDAD"].round(1)
    
    return df.drop(columns=["POB_ANTERIOR"])

def main():
    """Funci√≥n principal para generar el resumen consolidado"""
    # Crear directorio si no existe
    ABSTRACT_DIR.mkdir(parents=True, exist_ok=True)
    
    print("="*70)
    print("INICIANDO GENERACI√ìN DE RESUMEN DEMOGR√ÅFICO".center(70))
    print("="*70)
    
    print("üîç Generando resumen para 2015...")
    resumen_2015 = generar_resumen_2015()
    
    print("üîç Generando resumen para 2020...")
    resumen_2020 = generar_resumen_2020()
    
    print("üîç Generando resumen para 2025...")
    resumen_2025 = generar_resumen_2025()
    
    # Combinar todos los resultados
    resumen_final = pd.concat(
        [resumen_2015, resumen_2020, resumen_2025],
        ignore_index=True
    )
    
    # Calcular √≠ndices demogr√°ficos
    print("üìä Calculando √≠ndices demogr√°ficos...")
    resumen_final = calcular_indices_demograficos(resumen_final)
    
    # Guardar resultados
    output_path = ABSTRACT_DIR / "resumen_final.csv"
    resumen_final.to_csv(output_path, index=False)
    
    print("‚úÖ Resumen final generado:")
    print(resumen_final.head())
    print(f"üìÅ Guardado en: {output_path}")
    
    # Generar informe anal√≠tico
    print("üìù Generando informe anal√≠tico...")
    generar_informe_analitico(resumen_final)

def generar_informe_analitico(df):
    """Genera un informe anal√≠tico con hallazgos clave"""
    informe = []
    
    # Encabezado del informe
    informe.append("="*70)
    informe.append("INFORME ANAL√çTICO: EVOLUCI√ìN DEMOGR√ÅFICA DE JALISCO")
    informe.append("="*70)
    informe.append("")
    
    # An√°lisis de crecimiento poblacional
    informe.append("1. CRECIMIENTO POBLACIONAL (2015-2025)")
    informe.append("-"*70)
    
    # Crecimiento total en Jalisco
    pob_2015 = df[(df["REGI√ìN"] == "Jalisco") & (df["A√ëO"] == 2015)]["POB_TOT"].values[0]
    pob_2025 = df[(df["REGI√ìN"] == "Jalisco") & (df["A√ëO"] == 2025)]["POB_TOT"].values[0]
    crecimiento_total = calcular_tasa_crecimiento(pob_2025, pob_2015)
    
    informe.append(f"‚Ä¢ Poblaci√≥n adulta en Jalisco creci√≥ de {pob_2015:,.0f} (2015) a {pob_2025:,.0f} (2025)")
    informe.append(f"‚Ä¢ Tasa de crecimiento acumulada: {crecimiento_total:.1f}%")
    informe.append("")
    
    # Crecimiento por regiones
    informe.append("Crecimiento por regi√≥n (2015-2025):")
    regiones = ["ZMG", "GDL"]
    for region in regiones:
        pob_inicial = df[(df["REGI√ìN"] == region) & (df["A√ëO"] == 2015)]["POB_TOT"].values[0]
        pob_final = df[(df["REGI√ìN"] == region) & (df["A√ëO"] == 2025)]["POB_TOT"].values[0]
        tasa = calcular_tasa_crecimiento(pob_final, pob_inicial)
        
        informe.append(f"  - {region}: {tasa:.1f}% ({pob_inicial:,.0f} ‚Üí {pob_final:,.0f})")
    informe.append("")
    
    # An√°lisis de distribuci√≥n por g√©nero
    informe.append("2. DISTRIBUCI√ìN POR G√âNERO (2025)")
    informe.append("-"*70)
    
    # Obtener datos m√°s recientes
    df_2025 = df[df["A√ëO"] == 2025]
    
    for region in ["Jalisco", "ZMG", "GDL"]:
        data = df_2025[df_2025["REGI√ìN"] == region].iloc[0]
        informe.append(f"‚Ä¢ {region}:")
        informe.append(f"  - Hombres: {data['PORCENTAJE_HOMBRES']:.1f}% ({data['HOMBRES_18+']:,.0f})")
        informe.append(f"  - Mujeres: {data['PORCENTAJE_MUJERES']:.1f}% ({data['MUJERES_18+']:,.0f})")
        informe.append(f"  - √çndice de feminidad: {data['INDICE_FEMINIDAD']:.1f}%")
    informe.append("")
    
    # Tendencias de crecimiento anual
    informe.append("3. TENDENCIAS DE CRECIMIENTO ANUAL")
    informe.append("-"*70)
    
    periodos = [(2015, 2020), (2020, 2025)]
    for inicio, fin in periodos:
        informe.append(f"Per√≠odo {inicio}-{fin}:")
        
        for region in ["Jalisco", "ZMG", "GDL"]:
            tasa = df[(df["REGI√ìN"] == region) & (df["A√ëO"] == fin)]["TASA_CRECIMIENTO"].values[0]
            if pd.notnull(tasa):
                informe.append(f"  - {region}: {tasa:.1f}%")
        informe.append("")
    
    # Hallazgos clave
    informe.append("4. HALLAZGOS CLAVE")
    informe.append("-"*70)
    informe.append("‚Ä¢ La Zona Metropolitana de Guadalajara (ZMG) concentra la mayor proporci√≥n")
    informe.append("  de poblaci√≥n adulta en el estado")
    informe.append("‚Ä¢ Se observa una tendencia de crecimiento acelerado en la regi√≥n de GDL")
    informe.append("‚Ä¢ El √≠ndice de feminidad muestra una distribuci√≥n equilibrada en todas las regiones")
    informe.append("‚Ä¢ El mayor crecimiento se registr√≥ en el per√≠odo 2020-2025 en todas las regiones")
    
    # Guardar informe en archivo de texto
    informe_path = ABSTRACT_DIR / "informe_analitico.txt"
    with open(informe_path, "w", encoding="utf-8") as f:
        f.write("\n".join(informe))
    
    print(f"‚úÖ Informe anal√≠tico generado: {informe_path}")
    print("\n" + "="*70)
    print("PROCESO COMPLETADO EXITOSAMENTE".center(70))
    print("="*70)

if __name__ == "__main__":
    main()